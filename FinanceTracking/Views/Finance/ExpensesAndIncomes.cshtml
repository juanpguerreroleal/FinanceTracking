
@{
    ViewData["Title"] = "ExpensesAndIncomes";
    var status = "Alto";
    var tfurl1 = "@tensorflow/tfjs";
    var tfurl2 = "@tensorflow/tfjs-vis";
}

<h2>Estadisticas del usuario</h2>
<div>
    <div class="panel panel-primary">
        <div class="panel-heading">
            <h2>Clasificacion de nivel de gastos</h2>
        </div>
        <div class="panel-body">
            @if (status == "Alto")
            {
                <p style="color:#00ff21;">status</p>
            }
        </div>
    </div>
</div>
<h3>Gastos por mes en el año actual </h3>
<div><canvas id="lineChart"></canvas></div>

@{ChartJSCore.Models.Chart chart = (ChartJSCore.Models.Chart)ViewData["chart"]; }

@section Scripts {
    <script src="~/lib/Chart.js/dist/Chart.js"></script>
    <script>
        @Html.Raw(chart.CreateChartCode("lineChart"));
    </script>

    <script type="text/javascript">
    const model = tf.sequential();
    model.add(tf.layers.dense({units: 1, inputShape: [1]}));
    model.compile({loss: 'meanSquaredError', optimizer: 'sgd'});
    // Generate some synthetic data for training.
    const xs = tf.tensor2d([1, 2, 3, 4], [4, 1]);
    const ys = tf.tensor2d([1, 3, 5, 7], [4, 1]);
    // Train the model using the data.
    model.fit(xs, ys, {epochs: 10}).then(() => {
    // Use the model to do inference on a data point the model hasn't seen before:
    model.predict(tf.tensor2d([5], [1, 1])).print();
    // Open the browser devtools to see the output
    });
    </script>
}



